import { QinFilesNature, QinFilesOperation, QinFilesDescriptor } from "qinpel-res";
import { QinEdit } from "./qin-edit";
import { QinColumn } from "./qin-column";
import { QinExplorer } from "./qin-explorer";
import { QinLine } from "./qin-line";
import { QinString } from "./qin-string";
import { QinCombo } from "./qin-combo";
import { QinButton } from "./qin-button";
import { QinPanel } from "./qin-panel";
export declare type QinChosen = (chosen: string[]) => void;
export declare class QinChooser extends QinEdit {
    private _qinMain;
    private _qinUpper;
    private _qinConfirm;
    private _qinFolder;
    private _qinExtensions;
    private _qinSearch;
    private _qinUnder;
    private _qinExplorer;
    private _nature;
    private _operation;
    private _descriptors;
    private _singleSelection;
    private listeners;
    constructor(nature?: QinFilesNature, operation?: QinFilesOperation, descriptors?: QinFilesDescriptor[], singleSelection?: boolean);
    private initMain;
    private initUpper;
    private initUnder;
    private initExtensions;
    private loadFolder;
    getMain(): HTMLDivElement;
    getData(): string[];
    setData(data: string[]): void;
    addChosen(chosen: QinChosen): QinChooser;
    get qinMain(): QinColumn;
    get qinUpper(): QinLine;
    get qinConfirm(): QinButton;
    get qinFolder(): QinString;
    get qinExtensions(): QinCombo;
    get qinSearch(): QinButton;
    get qinUnder(): QinPanel;
    get qinExplorer(): QinExplorer;
    get nature(): QinFilesNature;
    set nature(value: QinFilesNature);
    get operation(): QinFilesOperation;
    set operation(value: QinFilesOperation);
    get descriptors(): QinFilesDescriptor[];
    set descriptors(value: QinFilesDescriptor[]);
    get singleSelection(): boolean;
    set singleSelection(value: boolean);
}
//# sourceMappingURL=qin-chooser.d.ts.map